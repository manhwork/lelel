const express = require("express");
const sqlite3 = require("sqlite3").verbose();
const path = require("path");
const { exec } = require("child_process");
const cookieParser = require("cookie-parser");

const app = express();
const PORT = 3000;

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static("public"));
app.use(cookieParser());
app.set("view engine", "ejs");

// Kh·ªüi t·∫°o database
const db = new sqlite3.Database("./lab.db", (err) => {
    if (err) {
        console.error("L·ªói k·∫øt n·ªëi database:", err);
    } else {
        console.log("ƒê√£ k·∫øt n·ªëi v·ªõi SQLite database");
        initDatabase();
    }
});

// Kh·ªüi t·∫°o c·∫•u tr√∫c database
function initDatabase() {
    db.serialize(() => {
        // B·∫£ng posts
        db.run(`CREATE TABLE IF NOT EXISTS posts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      content TEXT NOT NULL
    )`);

        // B·∫£ng users
        db.run(`CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT NOT NULL,
      password TEXT NOT NULL,
      email TEXT
    )`);

        // B·∫£ng secret
        db.run(`CREATE TABLE IF NOT EXISTS secret (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      flag TEXT NOT NULL,
      description TEXT
    )`);

        // Th√™m d·ªØ li·ªáu m·∫´u
        db.get("SELECT COUNT(*) as count FROM posts", (err, row) => {
            if (row.count === 0) {
                const posts = [
                    {
                        title: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Security Lab",
                        content: "ƒê√¢y l√† b√†i vi·∫øt ƒë·∫ßu ti√™n",
                    },
                    {
                        title: "SQL Injection l√† g√¨?",
                        content: "SQL Injection l√† m·ªôt k·ªπ thu·∫≠t t·∫•n c√¥ng...",
                    },
                    {
                        title: "B·∫£o m·∫≠t web cƒÉn b·∫£n",
                        content: "C√°c nguy√™n t·∫Øc b·∫£o m·∫≠t c∆° b·∫£n",
                    },
                    {
                        title: "OWASP Top 10",
                        content: "Danh s√°ch 10 l·ªó h·ªïng ph·ªï bi·∫øn nh·∫•t",
                    },
                    {
                        title: "Cross-Site Scripting (XSS)",
                        content: "T·∫•n c√¥ng XSS ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o",
                    },
                ];

                const stmt = db.prepare(
                    "INSERT INTO posts (title, content) VALUES (?, ?)"
                );
                posts.forEach((post) => stmt.run(post.title, post.content));
                stmt.finalize();
            }
        });

        db.get("SELECT COUNT(*) as count FROM users", (err, row) => {
            if (row.count === 0) {
                const users = [
                    {
                        username: "admin",
                        password: "admin123",
                        email: "admin@lab.local",
                    },
                    {
                        username: "user1",
                        password: "password1",
                        email: "user1@lab.local",
                    },
                    {
                        username: "user2",
                        password: "password2",
                        email: "user2@lab.local",
                    },
                ];

                const stmt = db.prepare(
                    "INSERT INTO users (username, password, email) VALUES (?, ?, ?)"
                );
                users.forEach((user) =>
                    stmt.run(user.username, user.password, user.email)
                );
                stmt.finalize();
            }
        });

        db.get("SELECT COUNT(*) as count FROM secret", (err, row) => {
            if (row.count === 0) {
                db.run("INSERT INTO secret (flag, description) VALUES (?, ?)", [
                    "FLAG{SQL_1nj3ct10n_M4st3r}",
                    "B√≠ m·∫≠t c·ªßa h·ªá th·ªëng",
                ]);
            }
        });

        // B·∫£ng comments
        db.run(`CREATE TABLE IF NOT EXISTS comments (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT NOT NULL,
      comment TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

        db.get("SELECT COUNT(*) as count FROM comments", (err, row) => {
            if (row.count === 0) {
                const comments = [
                    {
                        username: "admin",
                        comment: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng!",
                    },
                    {
                        username: "admin",
                        comment:
                            "üö© FLAG: FLAG{4uth_Byp4ss_C00k13_H4ck} - Ch·ªâ admin m·ªõi th·∫•y ƒë∆∞·ª£c!",
                    },
                    { username: "user1", comment: "T√≠nh nƒÉng r·∫•t hay!" },
                    {
                        username: "user2",
                        comment: "M√¨nh ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!",
                    },
                ];

                const stmt = db.prepare(
                    "INSERT INTO comments (username, comment) VALUES (?, ?)"
                );
                comments.forEach((c) => stmt.run(c.username, c.comment));
                stmt.finalize();
            }
        });
    });
}

// Routes
app.get("/", (req, res) => {
    // AUTO-RESET: X√≥a t·∫•t c·∫£ comments c√≥ XSS payload khi v·ªÅ trang ch√≠nh
    console.log("üîÑ [AUTO-RESET] ƒêang ki·ªÉm tra v√† reset comments...");

    db.all(
        "SELECT * FROM comments WHERE comment LIKE '%<script%' OR comment LIKE '%<img%' OR comment LIKE '%<svg%' OR comment LIKE '%onerror%'",
        [],
        (err, xssComments) => {
            if (!err && xssComments && xssComments.length > 0) {
                console.log(
                    `üßπ [AUTO-RESET] T√¨m th·∫•y ${xssComments.length} XSS comments, ƒëang x√≥a...`
                );

                // X√≥a t·∫•t c·∫£ comments
                db.run("DELETE FROM comments", (err) => {
                    if (err) {
                        console.error("‚ùå [AUTO-RESET] Error:", err);
                    } else {
                        console.log("‚úÖ [AUTO-RESET] ƒê√£ x√≥a t·∫•t c·∫£ comments");

                        // T·∫°o l·∫°i comments m·∫∑c ƒë·ªãnh
                        const defaultComments = [
                            {
                                username: "admin",
                                comment: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng!",
                            },
                            {
                                username: "admin",
                                comment:
                                    "üö© FLAG: FLAG{4uth_Byp4ss_C00k13_H4ck} - Ch·ªâ admin m·ªõi th·∫•y ƒë∆∞·ª£c!",
                            },
                            {
                                username: "user1",
                                comment: "T√≠nh nƒÉng r·∫•t hay!",
                            },
                            {
                                username: "user2",
                                comment: "M√¨nh ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!",
                            },
                        ];

                        const stmt = db.prepare(
                            "INSERT INTO comments (username, comment) VALUES (?, ?)"
                        );
                        defaultComments.forEach((c) =>
                            stmt.run(c.username, c.comment)
                        );
                        stmt.finalize(() => {
                            console.log(
                                "‚úÖ [AUTO-RESET] ƒê√£ kh√¥i ph·ª•c comments m·∫∑c ƒë·ªãnh"
                            );
                        });
                    }
                });
            } else {
                console.log("‚úÖ [AUTO-RESET] Comments s·∫°ch, kh√¥ng c·∫ßn reset");
            }
        }
    );

    res.render("index");
});

// Lab SQL Injection
app.get("/lab/sqli", (req, res) => {
    // L·∫•y t·∫•t c·∫£ posts ƒë·ªÉ hi·ªÉn th·ªã ban ƒë·∫ßu
    db.all("SELECT id, title FROM posts", [], (err, rows) => {
        if (err) {
            console.error(err);
            return res.render("sqli-lab", { posts: [] });
        }
        res.render("sqli-lab", { posts: rows });
    });
});

// API search - C√ì L·ªñ H·ªîNG SQL INJECTION C·ªê T√åNH
app.get("/api/search", (req, res) => {
    const searchTerm = req.query.q || "";

    // KH√îNG AN TO√ÄN - S·ª≠ d·ª•ng tr·ª±c ti·∫øp input v√†o query
    const query = `SELECT id, title FROM posts WHERE title LIKE '%${searchTerm}%'`;

    console.log("Query th·ª±c thi:", query);

    db.all(query, [], (err, rows) => {
        if (err) {
            return res.json({
                error: err.message,
                query: query,
            });
        }
        res.json({
            results: rows,
            query: query,
        });
    });
});

// Lab Command Injection
app.get("/lab/cmdi", (req, res) => {
    res.render("cmdi-lab");
});

// Lab Authentication Bypass
app.get("/lab/auth", (req, res) => {
    const authCookie = req.cookies.auth;

    if (authCookie) {
        // Parse cookie username:password
        const [username] = authCookie.split(":");

        // L·∫•y comments
        db.all(
            "SELECT * FROM comments ORDER BY created_at DESC",
            [],
            (err, comments) => {
                if (err) {
                    return res.render("auth-lab", {
                        authenticated: false,
                        username: null,
                        comments: [],
                    });
                }
                res.render("auth-lab", {
                    authenticated: true,
                    username: username,
                    comments: comments,
                });
            }
        );
    } else {
        res.render("auth-lab", {
            authenticated: false,
            username: null,
            comments: [],
        });
    }
});

// API Login - C√ì L·ªñ H·ªîNG AUTHENTICATION BYPASS C·ªê T√åNH
app.post("/api/login", (req, res) => {
    const { username, password } = req.body;

    db.get(
        "SELECT * FROM users WHERE username = ? AND password = ?",
        [username, password],
        (err, user) => {
            if (err) {
                return res.json({ success: false, error: err.message });
            }

            if (user) {
                // KH√îNG AN TO√ÄN - L∆∞u username:password v√†o cookie
                const authCookie = `${username}:${password}`;
                res.cookie("auth", authCookie, {
                    maxAge: 900000,
                    httpOnly: false,
                });

                console.log(
                    "Login th√†nh c√¥ng:",
                    username,
                    "- Cookie:",
                    authCookie
                );

                return res.json({ success: true, username: username });
            } else {
                return res.json({
                    success: false,
                    error: "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u",
                });
            }
        }
    );
});

// API Post Comment
app.post("/api/comment", (req, res) => {
    const authCookie = req.cookies.auth;
    const { comment } = req.body;

    if (!authCookie) {
        return res.json({ success: false, error: "Ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const [username] = authCookie.split(":");

    db.run(
        "INSERT INTO comments (username, comment) VALUES (?, ?)",
        [username, comment],
        function (err) {
            if (err) {
                return res.json({ success: false, error: err.message });
            }

            const commentId = this.lastID;
            res.json({ success: true, commentId: commentId });
        }
    );
});

// API Logout
app.post("/api/logout", (req, res) => {
    res.clearCookie("auth");
    res.json({ success: true });
});

// API Steal Cookie - Endpoint ƒë·ªÉ nh·∫≠n cookie b·ªã ƒë√°nh c·∫Øp (gi·∫£ l·∫≠p exploit server)
app.get("/api/steal", (req, res) => {
    const stolenCookie = req.query.cookie;
    const timestamp = new Date().toISOString();

    console.log("üö® STOLEN COOKIE RECEIVED:");
    console.log("Timestamp:", timestamp);
    console.log("Cookie:", stolenCookie);
    console.log("IP:", req.ip);
    console.log("User-Agent:", req.get("User-Agent"));
    console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

    // L∆∞u v√†o database ƒë·ªÉ xem log
    db.run(
        "INSERT INTO comments (username, comment) VALUES (?, ?)",
        ["[HACKER-LOG]", `Stolen Cookie: ${stolenCookie} at ${timestamp}`],
        (err) => {
            if (err) console.error(err);
        }
    );

    res.send("Cookie logged successfully");
});

// API ping - C√ì L·ªñ H·ªîNG COMMAND INJECTION C·ªê T√åNH
app.post("/api/ping", (req, res) => {
    const ip = req.body.ip || "";

    // KH√îNG AN TO√ÄN - S·ª≠ d·ª•ng tr·ª±c ti·∫øp input v√†o command
    const cmd = `ping -c 4 ${ip}`;

    console.log("Command th·ª±c thi:", cmd);

    exec(cmd, (error, stdout, stderr) => {
        if (error) {
            return res.json({
                error: error.message,
                command: cmd,
                output: stderr,
            });
        }
        res.json({
            command: cmd,
            output: stdout,
        });
    });
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
    console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
