// Middleware ƒë·ªÉ log c√°c request ƒë√°ng ng·ªù
const logSuspiciousActivity = (req, res, next) => {
    const { url, method, body, query } = req;

    // Log c√°c request c√≥ th·ªÉ ch·ª©a payload t·∫•n c√¥ng
    const suspiciousPatterns = [
        /<script/i,
        /union.*select/i,
        /drop.*table/i,
        /exec\(/i,
        /system\(/i,
        /\.\.\//,
        /javascript:/i,
    ];

    const requestString = JSON.stringify({ url, method, body, query });
    const isSuspicious = suspiciousPatterns.some((pattern) =>
        pattern.test(requestString)
    );

    if (isSuspicious) {
        console.log(`üö® [SECURITY] Suspicious activity detected:`);
        console.log(`   Method: ${method}`);
        console.log(`   URL: ${url}`);
        console.log(`   Body: ${JSON.stringify(body)}`);
        console.log(`   Query: ${JSON.stringify(query)}`);
        console.log(`   IP: ${req.ip}`);
        console.log(`   User-Agent: ${req.get("User-Agent")}`);
        console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    }

    next();
};

// Middleware ƒë·ªÉ set security headers (c·ªë t√¨nh kh√¥ng set ƒë·ªÉ d·ªÖ demo)
const setSecurityHeaders = (req, res, next) => {
    // Kh√¥ng set X-Frame-Options ƒë·ªÉ cho ph√©p iframe (d·ªÖ demo clickjacking)
    // Kh√¥ng set X-XSS-Protection ƒë·ªÉ d·ªÖ demo XSS
    // Kh√¥ng set Content-Security-Policy ƒë·ªÉ d·ªÖ demo XSS

    next();
};

module.exports = {
    logSuspiciousActivity,
    setSecurityHeaders,
};
